name: Deploy Demo UI

# list of trigger events https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on:
  workflow_dispatch:
    inputs:
      milestone_version:
        description: Enter milestone title
        required: true
        type: string

# only 1 workflow can be allowed for repository.
concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: true

permissions:
  pages: write
  contents: write
  deployments: write

env:
  DISPLAY_TROUBLESHOOT_OUTPUT: false

jobs:
  run_eligible:
    name: Workflow Run Eligible
    runs-on: ubuntu-latest
    outputs:
      branch-or-tag-name: ${{ steps.verify-milestone-input.outputs.branchOrTagName }}
    steps:
      - name: verify Workflow Branch
        env:
          EVENT_NAME: ${{ github.event_name }}
          BRANCH_NAME: ${{ github.ref }}
          IS_REPO_OWNER: ${{ github.actor == github.repository_owner }}
          IS_TRIGGERING_ACTOR_SAME: ${{ github.actor == github.triggering_actor }}
        run: |
          if [ "$EVENT_NAME" != "workflow_dispatch" ]; then
            echo "only manual trigger is supported"
            exit 1
          fi
          if [ "$BRANCH_NAME" != "refs/heads/master" ]; then
            echo "Workflow trigger from master is only supported"
            exit 1
          fi
          if [ "$IS_REPO_OWNER" != "true" ]; then
            echo "Workflow is not triggered by owner"
            exit 1
          fi
          if [ "$IS_TRIGGERING_ACTOR_SAME" == "false" ]; then
            echo "Workflow is not triggered by owner"
            exit 1
          fi
      - name: verify milestone input
        id: verify-milestone-input
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // get milestone
              const listMilestonesResponse = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: "all"
              });
              console.log("listMilestonesResponse=", listMilestonesResponse);
              const matchedMilestone = listMilestonesResponse.data.find(mlst=>mlst.title===context.payload.inputs.milestone_version);
              if(!matchedMilestone) {
                throw Error(`The requested milestone[${context.payload.inputs.milestone_version}] is not found.`);
              }
              const matchingBranchOrTagName = "";
              if(matchedMilestone.state === "open" ) {
                // either master or milestone branch are supported
                const listBranchesResponse = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                console.log("listBranchesResponse: ", listBranchesResponse);
                const milestoneBranch = listBranchesResponse.data.find(branchResponse=>branchResponse.name === `milestone/${context.payload.inputs.milestone_version}`);
                if(milestoneBranch) {
                  matchingBranchOrTagName = milestoneBranch.name
                } else {
                  console.log("milestone branch is not found, hence defaulting to master branch for open milestone. This could be false positive.")
                  matchingBranchOrTagName = "master"
                }
              } else {
                // only tags are supported
                const listTagsResponse = await github.rest.repos.listTags({
                  owner: context.repo.owner,
                  repo: context.repo.repo
                });
                console.log("listTagsResponse: ", listTagsResponse);
                const releasedTag = listTagsResponse.data.find(tagResponse=>tagResponse.name === context.payload.inputs.milestone_version);
                if(!releasedTag) {
                  throw new Error("Released Tag is not found for closed milestone.");
                }
                matchingBranchOrTagName = releasedTag.name
              }
              const getContentResponse = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: "package.json",
                ref: matchingBranchOrTagName
              });
              console.log("getContentResponse=", getContentResponse);
              // compare package.json against milestone version 
              const packageJsonContent = Buffer.from(getContentResponse.data.content, 'base64').toString();
              const packageJsonObj = JSON.parse(packageJsonContent);
              if(`v${packageJsonObj.version}` !== context.payload.inputs.milestone_version) {
                throw new Error(`The requested milestone version [${context.payload.inputs.milestone_version}] is not found in package.json [v${packageJsonObj.version}] in [${matchingBranchOrTagName}]`);
              }
              core.setOutput("branchOrTagName", matchingBranchOrTagName);
            } catch(error) {
              console.error("failed reason: ", error);
              core.setFailed(error.message);
            }

  build:
    name: Build
    runs-on: ubuntu-latest
    needs:
      - run_eligible
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.run_eligible.outputs.branch-or-tag-name }}
      - name: Setup Node Latest
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm --version
      - run: npm ci
      - run: cp src/demo/demo.ts src/demo/index.ts
      - run: npm run build

  unittest:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs:
      - run_eligible
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.run_eligible.outputs.branch-or-tag-name }}
      - name: Setup Node Latest
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm --version
      - run: npm ci
      - run: npm run test

  deploy_demo:
    name: Deploy demo
    runs-on: ubuntu-latest
    needs:
      - unittest
      - build
      - run_eligible
    # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs
    environment: github-pages
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.run_eligible.outputs.branch-or-tag-name }}
      - name: Setup Node Latest
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - run: npm --version
      - run: npm ci
      - run: cp src/demo/demo.ts src/demo/index.ts
      - run: npm run build
        env:
          REACT_APP_BASE_PATH: ${{ vars.GH_REACT_APP_BASE_PATH }}
          REACT_APP_REST_API_BASE_PATH: ${{ vars.GH_REACT_APP_REST_API_BASE_PATH }}
          REACT_APP_MINIMUM_SESSION_TIME: ${{ vars.GH_REACT_APP_MINIMUM_SESSION_TIME }}
          GENERATE_SOURCEMAP: ${{ vars.GH_GENERATE_SOURCEMAP }}
          PUBLIC_URL: ${{ vars.GH_PUBLIC_URL }}
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build
