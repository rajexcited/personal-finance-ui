# Build and Test - make sure code has no issues
#
name: Test Execution Plan

# list of trigger events https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on:
  # regardless of branch, run this default workflow to verify code
  workflow_dispatch:
    inputs:
      milestone-version:
        required: true
        type: string
        description: milestone version to release prod. e.g. 0.1.2
      testplan-type:
        required: true
        type: choice
        description: type of test plan to generate
        options:
          - regression
          - sanity


concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate_milestone:
    name: validate Milestone
    runs-on: ubuntu-latest
    outputs:
      milestone-id: ${{ steps.get-milestone.outputs.result.milestone-id }}
      milestone-title: ${{ steps.get-milestone.outputs.result.milestone-title }}
      milestone-branch: ${{ steps.get-milestone-branch.outputs.result.milestone-branch }}
    if: ${{ github.event.inputs.testplan-type != 'sanity' }}
    steps:
      - run: echo milestone version = ${{ github.event.inputs.milestone-version }}
      - name: Get Milestone
        id: get-milestone-issue
        uses: actions/github-script@v7
        # https://octokit.github.io/rest.js/v21/
        with:
          script: |
            const label = 'v${{ github.event.inputs.milestone-version }}';
            console.log("milestone label: ", label);
            const listMilestonesResponse = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            console.log("listMilestonesResponse: ", listMilestonesResponse);
            const matchedMilestone = listMilestonesResponse.data.find(m => m.title === label);
            if (!matchedMilestone) {
              throw new Error(`Milestone with label "${label}" is not found`);
            }
            console.log("found matching milestone: ", matchedMilestone);
            const details = {
              issueNumber: matchedMilestone.number,
              title: matchedMilestone.title,
              issueUrl: matchedMilestone.html_url,
              milestoneId: matchedMilestone.id,
              dueOn: matchedMilestone.due_on.split('T')[0],
              openIssues: matchedMilestone.open_issues,
              closedIssues: matchedMilestone.closed_issues
            };
            core.setOutput('details', details);
      - run: echo milestone details="${{ toJson(steps.get-milestone-issue.outputs.details) }}"
      - run: echo milestone details="${{ steps.get-milestone-issue.outputs.details }}"
      - env:
          MILESTON_DETAILS: ${{ toJson(steps.get-milestone-issue.outputs.details) }}
        run: echo milestone issue details="$MILESTON_DETAILS"
      - env:
          MILESTON_DETAILS: ${{ steps.get-milestone-issue.outputs.details }}
        run: echo milestone issue details="$MILESTON_DETAILS"
      - name: Get Milestone Branch
        id: get-milestone-branch
        uses: actions/github-script@v7
        with:
          script: |
            const branch = `milestone/v${{ github.event.inputs.milestone-version }}`;
            const getBranchResponse = await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: branch
              });
            console.log("getBranchResponse: ", getBranchResponse);
            core.setOutput('details', {
                branchName: getbranchResponse.data.name, 
                branchLink: getBranchResponse.data._links.html
              });
      - id: milestone-details
        uses: actions/github-script@v7
        env:
          MILESTON_ISSUE_DETAILS: ${{ toJson(steps.get-milestone-issue.outputs.details) }}
          MILESTON_BRANCH_DETAILS: ${{ toJson(steps.get-milestone-branch.outputs.details) }}
        with:
          script: |
            const milestoneDetails = JSON.parse(process.env.MILESTON_ISSUE_DETAILS);
            const milestoneBranchDetails = JSON.parse(process.env.MILESTON_BRANCH_DETAILS);
            core.setOutput('result', {
              ...milestoneDetails,
              ...milestoneBranchDetails
              });
      - name: Display outputs
        run: |
          echo "Milestone results: ${{ steps.milestone-details.outputs.result }}"
          echo "Milestone issue Url: ${{ steps.milestone-details.outputs.result.issueUrl }}"


  generate_regression:
    name: Generate Regression Test Plan
    runs-on: ubuntu-latest
    needs:
      - validate_milestone
    outputs:
      file-path: ${{ steps.generate.outputs.file-path }}
      name: ${{ steps.generate.outputs.name }}
      title: ${{ steps.generate.outputs.title }}
      labels: ${{ steps.generate.outputs.labels }}
    if: ${{ github.event.inputs.testplan-type == 'regression' }}
    steps:
      - run: echo validate mileston output json="${{ toJson(needs.validate_milestone.outputs) }}"
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          cache: "pip" # caching pip dependencies
          python-version: "3.13"
      - run: python --version
      - run: pip install -r .github/scripts/requirements.txt
      - run: pwd
      - id: generate
        run: |
          echo generating regression test plan from test case files
          milestone_id=${{ needs.validate_milestone.outputs.milestone-id }}
          milestone_title=${{ needs.validate_milestone.outputs.milestone-title }}
          milestone_branch=${{ needs.validate_milestone.outputs.milestone-branch }}
          gen_regression_testplan="regression-testplan-$(date +'%Y%m%d%H%M%S')"
          python .github/scripts/regression_testplan.py  --generate --template-path .github\ISSUE_TEMPLATE\regression_test_plan_template.md --generated-filename "$gen_regression_testplan" --tc-dir "test-cases" --milestone-id "$milestone_id" --milestone-branch "$milestone_branch" --milestone-title "$milestone_title"
          echo file-path=dist/$gen_regression_testplan.md >> $GITHUB_OUTPUT
      - uses: actions/cache@v4
        with:
          path: dist
          key: ${{ steps.generate.outputs.file-path }}
      - name: Create Regression Test Plan Issue
        id: create-testplan-issue
        uses: actions/github-script@v7
        env:
          TEST_PLAN_TITLE: ${{ steps.generate.outputs.title }}
          FILE_PATH: ${{ steps.generate.outputs.file-path }}
          MILESTONE_ID: ${{ needs.validate_milestone.outputs.milestone-id }}
          ISSUE_LABELS: "regression,test plan"
        with:
          script: |
            // https://octokit.github.io/rest.js/v21/#issues
            const fs = require('fs');
            const regressionTestplanContent = fs.readFileSync(process.env.FILE_PATH, 'utf8');
            const issueResponse = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: process.env.TEST_PLAN_TITLE,
              body: regression_test_plan_content,
              milestone: process.env.MILESTONE_ID,
              labels: process.env.ISSUE_LABELS.split(',')
            });
            console.log("issueResponse: ", issueResponse);
            core.setOutput('issue-number', issueResponse.data.number);
            const lockIssueResponse = await github.rest.issues.lock({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueResponse.data.number
            });
            console.log("lockIssueResponse: ", lockIssueResponse);
      - name: Display outputs
        run: |
          echo "Regression Test Plan Issue Number: ${{ steps.create-testplan-issue.outputs.result.issue-number }}"
          echo "Regression Test Plan Title: ${{ steps.generate.outputs.title }}"
          echo "Regression Test Plan Labels: ${{ steps.generate.outputs.labels }}"

