name: Generate Release Draft

on:
  workflow_dispatch:
    inputs:
      milestone_version:
        description: Enter milestone title
        required: true
        type: string
      run_experiment:
        description: Should run experiment?
        required: true
        type: choice
        default: no
        options:
          - yes
          - no

jobs:
  summarize_create:
    name: Summarize and Draft Release Notes
    permissions:
      contents: write
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Authenticate Google Cloud with Service Account
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Pip Install
        run: |
          cd .github
          echo "Python Version: " $(python --version)
          echo "Pip Version: " $(pip --version)
          pip install -r scripts/requirements.txt
          cd ..
          pip list

      - name: Experiment
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_TITLE: ${{ github.event.inputs.milestone_version }}
          GCP_LOCATION: ${{ vars.GCP_LOCATION }}
          GCP_MODEL_NAME: ${{ vars.GCP_MODEL_NAME }}
          # GRPC_VERBOSITY: "DEBUG"
          # GRPC_TRACE: "all"
        if: github.event.inputs.run_experiment == 'yes'
        run: |
          cd .github
          # capture error code +-e
          set +e
          python -m scripts.request.release.draft --example > example_output.log 2>&1
          RETURN_CODE=$?
          set -e
          cat example_output.log
          if [ $RETURN_CODE -ne 0 ]; then
            echo "failedReason<<EOF" >> $GITHUB_OUTPUT
            cat example_output.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          exit $RETURN_CODE

      - name: generate release change
        id: generate-change
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MILESTONE_TITLE: ${{ github.event.inputs.milestone_version }}
          GCP_LOCATION: ${{ vars.GCP_LOCATION }}
          GCP_MODEL_NAME: ${{ vars.GCP_MODEL_NAME }}
          # GRPC_VERBOSITY: "DEBUG"
          # GRPC_TRACE: "all"
        run: |
          cd .github
          python --version
          pip install -r scripts/requirements.txt
          # capture error code +-e
          set +e
          python -m scripts.request.release.draft --generate --template-path .github/release-notes.template.yml > generate_change_output.log 2>&1
          RETURN_CODE=$?
          set -e
          if [ $RETURN_CODE -ne 0 ]; then
            echo "failedReason<<EOF" >> $GITHUB_OUTPUT
            cat generate_change_output.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          cat generate_change_output.log
          exit $RETURN_CODE

      - name: Create Release draft
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_FULLNAME: ${{ github.repository }}
          MILESTONE_TITLE: ${{ github.event.inputs.milestone_version }}
          RELEASE_NOTES: ${{ steps.generate-change.outputs.release_change }}
          TARGET_REF: ${{ github.ref_name }}
        run: |
          # Check if the release already exists
          if gh release view "$MILESTONE_TITLE" --repo="$REPO_FULLNAME" > /dev/null 2>&1; then
            echo "Updating existing release with Tag $MILESTONE_TITLE"
            gh release edit "$MILESTONE_TITLE" \
                --draft --latest \
                --repo="$REPO_FULLNAME" \
                --title="$MILESTONE_TITLE" \
                --notes "$RELEASE_NOTES" \
                --target "$TARGET_REF"
          else
            echo "Creating release with Tag $MILESTONE_TITLE"
            gh release create "$MILESTONE_TITLE" \
                --draft --latest \
                --repo="$REPO_FULLNAME" \
                --title="$MILESTONE_TITLE" \
                --notes "$RELEASE_NOTES" \
                --target "$TARGET_REF"
          fi
          RELEASE_URL=$(gh release view "$MILESTONE_TITLE" --json url -q .url)
          echo "::notice:: The Release draft is created. $RELEASE_URL"
