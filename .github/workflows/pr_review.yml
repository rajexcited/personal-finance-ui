# For Pull request - verifies whether there are any issues for milestone opened?
name: PR Milestone issues

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request
on:
  pull_request:
    types: 
        - opened
        - edited
        - reopened
        - synchronize
        - milestoned
        - demilestoned
        - ready_for_review
    branches:
      - "master"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  issues: write

jobs:
  workflow_eligible:
    name: Workflow Run eligibility
    runs-on: ubuntu-latest
    steps:
      - name: Display Github object
        run: |
          echo 'github json: ${{ toJson(github) }}'
      - name: Display Context and rest availabilities
        uses: actions/github-script@v7
        with:
          script: |
            console.log("Context obj: ", context);
            console.log("Github config: ", github)
            console.log("Github Rest API config: ", github.rest)
            console.log("Github Rest Issues API:", github.rest.issues)
      - name: PR Should be open
        if: github.event.pull_request.state != 'open'
        run: |
          echo "state should be open, skipping"
          exit 0
      - name: PR source branch milestone
        if: ${{ !startsWith(github.event.pull_request.head.ref, 'ref/head/milestone/') }}
        run: |
          echo "source branch for PR should be milestone, skipping"
          echo "found other source branch, ${{ github.event.pull_request.head.ref }}"
          exit 0

  required_props:
    name: validate PR Issues
    runs-on: ubuntu-latest
    needs: 
        - workflow_eligible
    steps:
        - name: Dont have milestone
          if: github.event.pull_request.milestone == null
          run: |
            echo "failing to indicate proper PR check"
            echo "milestone is not assigned to PR, please assign the appropriate milestone."
            exit 1
        - name: Draft state
          if: github.event.pull_request.draft == true
          run: |
            echo "failing to indicate proper PR check"
            echo "PR is in draft state, not ready to review."
            exit 1

  validate:
    name: validate PR Issues
    runs-on: ubuntu-latest
    needs: 
        - required_props
    steps:
      - name: Milestone matches
        env:
          MILESTONE_TITLE: ${{ github.event.pull_request.milestone.title }}
          SOURCE_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "Milestone title to PR is $MILESTONE_TITLE"
          if [[ ! "$SOURCE_BRANCH_NAME" =~ ${MILESTONE_TITLE}$ ]]; then
            echo "Source milestone branch is not matching assigned milestone. please correct the assignment"
            exit 1
          fi
      - name: Milestone Branch behind master
        uses: actions/github-script@v7
        with:
          script: |
            // verify milestone branch commit has merged all of the master branch
            const compareResponse = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: "master",
              head: context.payload.pull_request.head.ref
            });
            console.log("milestone branch as head and master branch as base, compareResponse: ", compareResponse);
            if (compareResponse.data.behind_by > 0) {
              core.setFailed(`Milestone branch is behind master by ${compareResponse.data.behind_by} commits.`);
            }
      - name: All issues closed
        uses: actions/github-script@v7
        with:
          script: |
            const listIssuesResponse = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              milestone: context.payload.pull_request.milestone.number
            });
            console.log("listIssuesResponse: ", listIssuesResponse);
            if(listIssuesResponse.data.length > 0) {
                core.setFailed(`Found ${listIssuesResponse.data.length} open issues for milestone ${context.payload.pull_request.milestone.title}. Resolved all issues before merging.`);
            }
      - name: Regression testplan
        uses: actions/github-script@v7
        with:
          script: |
            const listIssuesResponse = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              milestone: context.payload.pull_request.milestone.number,
              labels: ["regression", "testplan"],
            });
            console.log("listIssuesResponse: ", listIssuesResponse);
            if(listIssuesResponse.data.length === 0 ) {
                core.setFailed(`Regression tesplan is not found for milestone ${context.payload.pull_request.milestone.title}. Make sure to execute regression testplan before merging.`);
            }
            const commentPromises = listIssuesResponse.data.map(async regressionTestplanIssue => {
                if(regressionTestplanIssue.state === "open") {
                    // if this runs after all issues closed step, we never get error. but in case of step execute order changes
                    core.setFailed(`regression testplan issue [#${regressionTestplanIssue.number}] is not completed yet`);
                    throw new Error(`regression testplan issue [#${regressionTestplanIssue.number}] is not completed yet`);
                }
                const listCommentsResponse = await github.rest.issues.listComments({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: regressionTestplanIssue.number
                });
                console.log("listCommentsResponse: ", listCommentsResponse);
                return listCommentsResponse.data.find(comment=> comment.body.includes("There are no critical issues") && comment.body.includes("Status-All%20Good"));
            });
            const completedComments = await Promise.all(commentPromises);
            const foundCompletedComment = completedComments.find(comment=>!!comment);
            if(!foundCompletedComment) {
                core.setFailed("Regression issue is closed but all critical issues are not resolved.");
            }
            console.log("foundCompletedComment: ", foundCompletedComment);

