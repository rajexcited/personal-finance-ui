# For Pull request - verifies whether there are any issues for milestone opened?
name: PR Milestone issues

# https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows#pull_request
on:
  pull_request:
    types:
      - opened
      - edited
      - reopened
      - synchronize
      - milestoned
      - demilestoned
      - ready_for_review
      - closed
    branches:
      - "master"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  issues: read

jobs:
  workflow_eligible:
    name: Workflow Run eligibility
    runs-on: ubuntu-latest
    outputs:
      is-just-open: ${{ steps.pr-vars.outputs.is-just-opened }}
      is-open: ${{ steps.pr-vars.outputs.is-open }}
      is-milestone-source: ${{ steps.source-branch.outputs.is-milestone }}
      for-milestone-review: ${{ steps.pr-vars.outputs.for-milestone-review }}
      is-milestone-merged-and-closed: ${{ steps.pr-vars.outputs.is-milestone-merged-and-closed }}
    steps:
      - name: Display Github object
        env:
          GITHUB_JSON: ${{ toJson(github) }}
        run: |
          echo "github json: $GITHUB_JSON"
      - name: Display Context and rest availabilities
        uses: actions/github-script@v7
        with:
          script: |
            console.log("Context obj: ", context);
            console.log("Github config: ", github)
            console.log("Github Rest API config: ", github.rest)
            console.log("Github Rest Issues API:", github.rest.issues)
      - name: PR Owner
        if: github.event.pull_request.user.login != github.repository_owner
        run: |
          echo "failing to indicate proper PR check"
          echo "PR is not open by repo owner. Use milestone as target to merge. Only owner can have PR to merge to master branch."
          exit 1
      - id: source-branch
        name: PR source branch
        env:
          IS_MILESTONE_SOURCE: ${{ startsWith(github.event.pull_request.head.ref, 'ref/head/milestone/') }}
        run: |
          echo "PR source branch is ${{ github.event.pull_request.head.ref }}"
          echo "is-milestone=$IS_MILESTONE_SOURCE" >> $GITHUB_OUTPUT
      - name: Dont have milestone
        if: github.event.pull_request.milestone == null && steps.source-branch.outputs.is-milestone == 'true'
        run: |
          echo "failing to indicate proper PR check"
          echo "milestone is not assigned to PR, please assign the appropriate milestone."
          exit 1
      - name: Draft state
        if: github.event.pull_request.draft == true
        run: |
          echo "failing to indicate proper PR check"
          echo "PR is in draft state, not ready to review."
          exit 1
      - id: pr-vars
        name: PR Should be open
        env:
          IS_NOT_CLOSED: ${{ github.event.pull_request.state != 'closed' }}
          IS_OPENED: ${{ endsWith(github.event.pull_request.state, 'opened') }}
          IS_MILESTONE_SOURCE: ${{ steps.source-branch.outputs.is-milestone }}
          IS_MERGED: ${{ github.event.pull_request.merged }}
        run: |
          echo "exporting variable conditions"
          echo "is-just-opened=$IS_OPENED" >> $GITHUB_OUTPUT
          echo "is-open=$IS_NOT_CLOSED" >> $GITHUB_OUTPUT
          FOR_MILESTONE_REVIEW="false"
          if [[ "$IS_NOT_CLOSED" == "true" && "$IS_MILESTONE_SOURCE" == "true" ]]; then
            echo "eligible for Review"
            FOR_MILESTONE_REVIEW="true"
          fi
          echo "for-milestone-review=$FOR_MILESTONE_REVIEW" >> $GITHUB_OUTPUT
          JUST_MERGED="false"
          if [[ "$IS_NOT_CLOSED" == "false" && "$IS_MERGED" == "true" && "$IS_MILESTONE_SOURCE" == "true" ]]; then
            echo "eligible for Review"
            JUST_MERGED="true"
          fi
          echo "is-milestone-merged-and-closed=$JUST_MERGED" >> $GITHUB_OUTPUT

  delete_after_merge:
    name: Delete After Merge
    runs-on: ubuntu-latest
    needs:
      - workflow_eligible
    if: needs.workflow_eligible.outputs.is-milestone-merged-and-closed == 'true'
    permissions:
      contents: write
    steps:
      - name: Verify Merged by Owner
        env:
          MERGED_BY_USER: ${{ github.event.pull_request.merged_by.login }}
          REPO_OWNER: ${{ github.repository_owner }}
          MERGED_ON: ${{ github.event.pull_request.merged_at }}
        run: |
          echo "merged timestamp: $MERGED_ON"
          if [[ "$MERGED_BY_USER" != "$REPO_OWNER" ]]; then
            echo "PR is not merged by owner"
            exit 1
          fi

          ALLOWED_MERGE_AFTER=$(date -d "now - 15 minutes" +%Y-%m-%dT%H:%M:%S%z)
          NOW=$(date +"%Y-%m-%dT%H:%M:%S%z")
          if [[ "$MERGED_ON" <= "$ALLOWED_MERGE_AFTER" || "$MERGED_ON" >= "$NOW" ]]; then
            echo merged timestamp is not supported automatic deletion of head branch
            exit 1
          fi
      - name: Compare Milestone branch to master
        uses: actions/github-script@v7
        with:
          script: |
            const compareResponse = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "master",
              base: context.payload.pull_request.head.ref
            });
            console.log("milestone branch as base and master branch as head, compareResponse: ", compareResponse);
            if (compareResponse.data.behind_by > 0) {
              throw new Error(`Milestone branch [${context.payload.pull_request.head.ref}] is not fully merged to master. and master is behind by ${compareResponse.data.behind_by} commits.`);
            }
      - name: Checkout
        uses: actions/checkout@v4
      - name: Delete Milestone Branch
        env:
          BRANCH_REF: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "Deleting branch, $BRANCH_REF"
          git push origin --delete $BRANCH_REF
          git fetch --prune

  validate_milestone:
    name: Validate Milestone Branch
    runs-on: ubuntu-latest
    needs:
      - workflow_eligible
    if: needs.workflow_eligible.outputs.for-milestone-review == 'true'
    steps:
      - name: Milestone matches head branch
        env:
          MILESTONE_TITLE: ${{ github.event.pull_request.milestone.title }}
          SOURCE_BRANCH_NAME: ${{ github.event.pull_request.head.ref }}
        run: |
          echo "Milestone title to PR is $MILESTONE_TITLE"
          MILESTONE_BRANCH="milestone/$MILESTONE_TITLE"
          # error if head branch is not ending with milestone branch
          if [[ ! "$SOURCE_BRANCH_NAME" =~ ${MILESTONE_BRANCH}$ ]]; then
            echo "Source milestone branch is not matching assigned milestone. please correct the assignment"
            exit 1
          fi
      - name: Milestone Branch behind master
        uses: actions/github-script@v7
        with:
          script: |
            // verify milestone branch commit has merged all of the master branch
            const compareResponse = await github.rest.repos.compareCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: "master",
              head: context.payload.pull_request.head.ref
            });
            console.log("milestone branch as head and master branch as base, compareResponse: ", compareResponse);
            if (compareResponse.data.behind_by > 0) {
              core.setFailed(`Milestone branch is behind master by ${compareResponse.data.behind_by} commits.`);
              throw new Error(`Milestone branch is behind master by ${compareResponse.data.behind_by} commits.`);
            }

  validate_regression:
    name: validate Regression
    runs-on: ubuntu-latest
    needs:
      - workflow_eligible
    if: needs.workflow_eligible.outputs.for-milestone-review == 'true'
    outputs:
      testplan-issue-number: ${{ steps.find-validate-regression-testplan.outputs.testplanIssueNumber }}
    steps:
      - id: find-validate-regression-testplan
        name: Find and Validate Regression Testplan
        uses: actions/github-script@v7
        with:
          script: |
            try{
              // Fetch all comments on the pull request
              const listCommentsResponse = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number
              });
              console.log("listCommentsResponse: ", listCommentsResponse);
              const testplanIssueRegex = new RegExp(".*regression test plan:.+https://github.com/"+context.repo.owner+"/"+context.repo.repo+"/issues/(\\d+).*", "i");
              const matchedComments = listCommentsResponse.data.filter(comment=>testplanIssueRegex.test(comment.body));
              console.log("matchedComments =", matchedComments);
              if(matchedComments.length===0) {
                throw new Error("regression testplan issue link is not found.");
              }
              const supressErrorWithNull = async (fn) => {
                try {
                  return await fn();
                } catch(e) {
                  console.log("error is supressed with null", e);
                  return null;
                }
              };
              const allowedLabels = ["regression", "test plan"];
              const testplanIssuePromises = matchedComments.map(async mc=> {
                                if(!testplanIssueRegex.test(mc.body)) {
                                  return null;
                                }
                                const matchedTestplanGroups = testplanIssueRegex.exec(mc.body);
                                const getIssueResponse = supressErrorWithNull(()=> {
                                  return github.rest.issues.get({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    issue_number: matchedTestplanGroups[1]
                                  });
                                });
                                console.log("getIssueResponse: ", getIssueResponse);
                                if(getIssueResponse?.data.state !== "closed") {
                                  return null;
                                }
                                const issueLables = getIssueResponse.data.labels.filter(lbl=>allowedLabels.includes(lbl.name));
                                console.log("issueLables=", issueLables);
                                if(issueLables.length !== allowedLabels.length) {
                                  return null;
                                }
                                const listCommentsResponse = await github.rest.issues.listComments({
                                  owner: context.repo.owner,
                                  repo: context.repo.repo,
                                  issue_number: matchedTestplanGroups[1]
                                });
                                console.log("listCommentsResponse: ", listCommentsResponse);
                                if(listCommentsResponse.data.length===0) {
                                  return null;
                                }
                                return {
                                  issueDetails: getIssueResponse.data,
                                  issueComments: listCommentsResponse.data
                                };
                              });
              // promise with null values, invalid
              const testplanIssueDetailList = await Promise.all(testplanIssuePromises).filter(iss=>iss!=null);
              if(testplanIssueDetailList.length === 0) {
                throw new Error("regression testplan issue link is not found in PR comments");
              }
              const foundCompletedTestplanDetail = testplanIssueDetailList.find(testplanIssue => !!testplanIssue.issueComments.find(comment=> comment.body.includes("There are no critical issues") && comment.body.includes("Status-All%20Good")));
              if(!foundCompletedTestplanDetail) {
                throw new Error("Regression issue is closed but all critical issues are not resolved");
              }
              core.setOutput("testplanIssueNumber", foundCompletedTestplanDetail.issueDetails.number);
            } catch(e) {
              console.error("failed", e);
              core.setFailed(e.message);
            }

  validate_issues:
    name: validate Related Issues
    runs-on: ubuntu-latest
    needs:
      - workflow_eligible
    if: needs.workflow_eligible.outputs.for-milestone-review == 'true'
    steps:
      - name: All issues closed
        uses: actions/github-script@v7
        with:
          script: |
            const listIssuesResponse = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              milestone: context.payload.pull_request.milestone.number
            });
            console.log("listIssuesResponse: ", listIssuesResponse);
            const listIssuesWithoutPr = listIssuesResponse.data.filter(iss=>iss.url!==context.payload.pull_request._links.issue.href);
            if(listIssuesWithoutPr.length > 0) {
                core.setFailed(`Found ${listIssuesWithoutPr.length} open issues for milestone ${context.payload.pull_request.milestone.title}. Resolved all issues before merging.`);
                throw new Error(`Found ${listIssuesWithoutPr.length} open issues for milestone ${context.payload.pull_request.milestone.title}. Resolved all issues before merging.`);
            }

  validate_stack:
    name: Validate UI Stack
    runs-on: ubuntu-latest
    needs:
      - workflow_eligible
      - validate_regression
    environment:
      name: testplan
    if: needs.workflow_eligible.outputs.for-milestone-review == 'true'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_CICD_ROLE_ARN }}
          role-session-name: cdkSession
      - id: ui-stack
        name: Verify UI Stack Exist
        env:
          ENVID: ${{ vars.AWS_ENVID }}
          MILESTONE_TITLE: ${{ github.event.pull_request.milestone.title }}
        run: |
          STACK_NAME="prsfin-$ENVID-ui-deploy-stack"  
          set +e
          DESCRIBE_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME")
          RET_CODE=$?
          set -e
          echo "ui_describe_stack<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIBE_STACK_OUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [[ $RET_CODE -ne 0 ]]; then
            echo "UI Stack does not exists."
            exit 0
          fi

          TAG_VALUE=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].Tags[] | select(.Key=="environment").Value')
          if [[ "$TAG_VALUE" != "$ENVID" ]]; then
            echo "Stack is deployed, but environment tag is different."
            exit 1
          fi

          STACK_NAME="prsfin-$ENVID-infra-stack"
          DESCRIBE_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME")
          echo "api_describe_stack<<EOF" >> $GITHUB_OUTPUT
          echo "$DESCRIBE_STACK_OUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Add UI Stack Comment
        if: needs.workflow_eligible.outputs.is-just-open == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const uiDescribeStack = ${{ steps.ui-stack.outputs.ui_describe_stack || '{}' }};
            const apiDescribeStack = ${{ steps.ui-stack.outputs.api_describe_stack || '{}' }};
            if(!uiDescribeStack.Stacks) {
              // stack may not exist
              return;
            }
            // Convert UTC to Central Time
            const centralTimeFormat = new Intl.DateTimeFormat("en-US", {
              timeZone: "America/Chicago", 
              year: "numeric",
              month: "2-digit",
              day: "2-digit",
              hour: "2-digit",
              minute: "2-digit",
              second: "2-digit",
              timeZoneName: "short"
            });
            const toTime = (datetime) => {
              const date = new Date(datetime);
              return centralTimeFormat.format(date);
            };

            const commentBody = [
              "## Found Deployed UI Stack ",
              "<br/>", 
            ];

            commentBody.push("", "### Stack Details: ", "");
            commentBody.push("- **Environment Name:** Testplan environment");
            commentBody.push(`- **Status Code:** ${uiDescribeStack.Stacks[0].StackStatus}`);
            commentBody.push(`- **Status Reason:** ${uiDescribeStack.Stacks[0].StackStatusReason || "NA"}`);
            commentBody.push(`- **Detailed Status :** ${uiDescribeStack.Stacks[0].DetailedStatus || "NA"}`);

            // audit details available
            commentBody.push("", "### Stack Audit: ", "");
            commentBody.push("- **Created On:**  " + toTime(uiDescribeStack.Stacks[0].CreationTime));
            commentBody.push("- **Updated On:**  " + toTime(uiDescribeStack.Stacks[0].LastUpdatedTime));

            commentBody.push("", "### Stack Outputs: ", "");
            uiDescribeStack.Stacks[0].Outputs.forEach(output => {
              commentBody.push(` - **${output.OutputKey}:** ${output.OutputValue}  `);
            });
            const domainOutput = apiDescribeStack.Stacks[0].Outputs.find(output=>output.OutputKey.startsWith("DistributionDomain"));
            if(domainOutput) {
              const prefix = domainOutput.OutputValue.startsWith("https:/")? "": "https://";
              commentBody.push(` - **${domainOutput.OutputKey}:** ${prefix}${domainOutput.OutputValue}  `);
            } else if(uiDescribeStack.Stacks[0].Outputs.length === 0) {
              commentBody.push("  No outputs found.  ");
            }

            commentBody.push("", "### Stack Tags: ", "");
            uiDescribeStack.Stacks[0].Tags.forEach(tag => {
              commentBody.push(` - **${tag.Key}:** ${tag.Value}  `);
            });
            commentBody.push("", "");

            const prCommentResponse = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: commentBody.join("\n")
            });
            console.log("for PR, commentResponse: ", prCommentResponse);
      - name: validate stack
        env:
          DESCRIBE_STACK_OUT: ${{ steps.ui-stack.outputs.ui_describe_stack }}
          MILESTONE_TITLE: ${{ github.event.pull_request.milestone.title }}
          TESTPLAN_ISS_REPO: ${{ github.event.repository.name }}
          TESTPLAN_ISS_NUMBER: ${{ needs.validate_regression.outputs.testplan-issue-number }}
        run: |
          if [[ -z "$DESCRIBE_STACK_OUT" ]]; then
            echo "stack describe output is not available. cannot validate, stack may not exist"
            exit 0
          fi
          TAG_VALUE=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].Tags[] | select(.Key=="milestone").Value')
          if [[ "$TAG_VALUE" == "$MILESTONE_TITLE" ]]; then
            echo "Stack is still deployed for milestone."
            exit 1
          fi
          TAG_VALUE=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].Tags[] | select(.Key=="testplanType").Value')
          if [[ "$TAG_VALUE" == "regression" ]]; then
            echo "deployed Stack is not for regression testplan."
            exit 1
          fi
          TAG_VALUE=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].Tags[] | select(.Key=="testplanIssueNumber").Value')
          EXPECTED_TESTPLAN_ISS="$TESTPLAN_ISS_REPO/issue-$TESTPLAN_ISS_NUMBER"
          if [[ "$TAG_VALUE" == "$EXPECTED_TESTPLAN_ISS" ]]; then
            echo "deployed Stack for regression testplan issue is not same."
            exit 1
          fi
          STACK_STATUS=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].StackStatus')
          if [[ "$STACK_STATUS" != "DELETE_COMPLETE" ]]; then
            STACK_STATUS_REASON=$(echo "$DESCRIBE_STACK_OUT" | jq -r '.Stacks[0].StackStatusReason')
            echo "The Stack status is not deleted yet. Found status: $STACK_STATUS. The Stack Status Reason: $STACK_STATUS_REASON"
            exit 1
          fi

  wait-and-approve:
    name: Wait for PR Checks and approve
    runs-on: ubuntu-latest
    needs:
      - validate_milestone
      - validate_regression
      - validate_issues
      - validate_stack
    permissions:
      checks: read
      pull-requests: write
      statuses: read
      contents: read
    steps:
      - name: Wait for All Checks to Finish
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          JOB_NAME: "Wait for PR Checks and approve"
        run: |
          echo "Waiting for all checks to complete..."
          while true; do
            # Fetch the status of checks excluding this workflow
            PR_CHECKS_OUTPUT=$(gh pr checks ${{ github.event.pull_request.number }} --repo "${{ github.repository }}" | grep -v "$JOB_NAME")
            echo "$PR_CHECKS_OUTPUT"
            STATUS=$(echo "$PR_CHECKS_OUTPUT" | grep -oE "pending|in_progress" || echo "")
            
            # Exit loop if no checks are pending or in progress
            if [ -z "$STATUS" ]; then
              echo "All checks have finished."
              break
            else
              echo "Checks are still running. Retrying in 30 seconds..."
              sleep 30
            fi
          done
      - name: Verify Success of Other Checks
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure no check has failed
          RESULT=$(gh pr checks ${{ github.event.pull_request.number }} --repo ${{ github.repository }} | grep -i "fail" || echo "nofailed")
          if [[ "$RESULT" != "nofailed" ]]; then
            echo "Found some failures: $RESULT"
            exit 1
          fi
      - name: Approve PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Approving pull request..."
          gh pr review ${{ github.event.pull_request.number }} --approve --repo ${{ github.repository }}
