# Prepare UI artifact to deploy as statis site
name: Provision/Deprovision Testplan Environment
run-name: Request - Provision/Deprovision Testplan Environment

# list of trigger events https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows
on:
  issues:
    types:
      - opened
      - deleted

concurrency:
  group: ${{ github.workflow }}-${{ github.event.issue.milestone.number }}-${{ github.event.issue.number }}
  cancel-in-progress: true

env:
  ARTIFACT_NAME: personal-finance-ui-${{ github.event.issue.milestone.title }}

permissions:
  issues: write

jobs:
  display_output:
    name: Display Output
    runs-on: ubuntu-latest
    steps:
      # https://docs.github.com/en/webhooks/webhook-events-and-payloads#issues
      - run: |
          echo "Issue number: ${{ github.event.issue.number }}"
          echo "Issue id: ${{ github.event.issue.id }}"
      - run: |
          echo "Issue title: ${{ github.event.issue.title }}"
      - run: |
          echo "Issue body: ${{ github.event.issue.body }}"
      - run: |
          echo "Issue milestone: ${{ github.event.issue.milestone }}"
          echo "Issue milestone title: ${{ github.event.issue.milestone.title }}"
      - run: |
          echo "Issue state: ${{ github.event.issue.state }}"
          echo "Issue state reason: ${{ github.event.issue.state_reason }}"
      - run: |
          echo "Issue draft: ${{ github.event.issue.draft }}"
          echo "Issue locked: ${{ github.event.issue.locked }}"
          echo "Issue active lock reason: ${{ github.event.issue.active_lock_reason }}"
      - run: |
          echo "Issue labels name: ${{ toJson(github.event.issue.labels.*.name) }}"
      - run: |
          echo "Issue total comments: ${{ github.event.issue.comments }}"
      - run: |
          echo "Issue updated at: ${{ github.event.issue.updated_at }}"
          echo "Issue closed at: ${{ github.event.issue.closed_at }}"
          echo "Issue created at: ${{ github.event.issue.created_at }}"
      - run: |
          echo "Issue author association: ${{ github.event.issue.author_association }}"
      - run: |
          echo "Issue sender login: ${{ github.event.sender.login }}"
          echo "Issue sender type: ${{ github.event.sender.type }}"
          echo "Issue sender id: ${{ github.event.sender.id }}"
          echo "Issue sender view type: ${{ github.event.sender.user_view_type }}"
      - run: |
          echo "Issue user login: ${{ github.event.issue.user.login }}"
          echo "Issue user type: ${{ github.event.issue.user.type }}"
          echo "Issue user id: ${{ github.event.issue.user.id }}"
          echo "Issue user view type: ${{ github.event.issue.user.user_view_type }}"
      - run: |
          echo "Issue assignee login: ${{ github.event.issue.assignee.login }}"
          echo "Issue assignee type: ${{ github.event.issue.assignee.type }}"
          echo "Issue assignee id: ${{ github.event.issue.assignee.id }}"
          echo "Issue assignee view type: ${{ github.event.issue.assignee.user_view_type }}"
      - run: |
          echo "github actor: ${{ github.actor }}"
          echo "github triggering actor: ${{ github.triggering_actor }}"
          echo "Issue perfomed by app: ${{ github.event.issue.performed_via_github_app }}"
      - run: |
          echo "action: ${{ github.action }}"
          echo "event name: ${{ github.event_name }}"
          echo "event changes: ${{ github.event.changes }}"
          echo "event action: ${{ github.event.action }}"
      - run: |
          echo 'github json: ${{ toJson(github) }}'
      - uses: actions/github-script@v7
        with:
          script: |
            console.log("Context obj: ", context);
            console.log("Github config: ", github)
            console.log("Github Rest API config: ", github.rest)
            console.log("Github Rest Issues API:", github.rest.issues)

  update_request:
    name: Start Request
    runs-on: ubuntu-latest
    if: >
      contains(github.event.issue.labels.*.name, 'deployment') &&
      contains(github.event.issue.labels.*.name, 'test plan') &&
      startsWith(github.event.issue.author_association, 'OWNER') &&
      (
      startsWith(github.event.issue.title, '[Request] Provision Test Plan Environment') ||
      startsWith(github.event.issue.title, '[Request] Deprovision Test Plan Environment') 
      ) &&
      github.event.issue.milestone != null
    outputs:
      failed-reason: ${{ steps.update_issue_start.outputs.failedReason }}
      original-issue-title: ${{ steps.update_issue_start.outputs.issue-title }}
    steps:
      - run: |
          echo "The issue has milestone assigned and locked."
          echo "The issue has required labels (deployment, test plan)."
          echo "This request form is raised by owner."
          echo "This request form title indicates that It is related to provision or deprovision test plan environment."
          echo "We will validate request form issue details."
      - id: update_issue_start
        name: Update Issue - Start Processing
        uses: actions/github-script@v7
        with:
          script: |
            core.setOutput("issue-title", context.payload.issue.title);
            const updateResponse = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              title: "[Processing] " + context.payload.issue.title
            });
            console.log("updateResponse: ", updateResponse);
            if(!context.payload.issue.locked) {
              const lockIssueResponse = await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              console.log("Lock issue response:", lockIssueResponse);
            }

  validate_request:
    name: Validate Request Form
    runs-on: ubuntu-latest
    needs:
      - update_request
    environment: testplan
    permissions:
      id-token: write
    outputs:
      milestone-branch: ${{ steps.get-milestone.outputs.milestoneBranch }}
      failed-reason: ${{ steps.get-milestone.outputs.failedReason || steps.testplan-issue.outputs.failedReason || steps.request-form.outputs.failedReason || steps.provision-stack.outputs.failedReason || steps.deprovision-stack.outputs.failedReason }}
      testplan-type: ${{ steps.testplan-issue.outputs.testplanType }}
      parent-issue: ${{ steps.testplan-issue.outputs.parentIssue }}
      request-type: ${{ steps.request-form.outputs.request_type }}
      deployment-scope: ${{ steps.request-form.outputs.deployment_scope }}
      api-version: ${{ steps.request-form.outputs.api_version }}
      stack-details: ${{ steps.provision-stack.outputs.stack_details || steps.deprovision-stack.outputs.stack_details }}
    steps:
      - id: get-milestone
        name: Validate Milestone and Branch
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // verify milestone branch exists
              console.log("issue has milestone title: ", context.payload.issue.milestone.title);
              if(context.payload.issue.milestone.state != "open") {
                throw new Error("Milestone is not in open state");
              }
              if(!context.payload.issue.milestone.due_on) {
                throw new Error("Milestone due date is not set");
              }
              const milestoneDueOn = new Date(context.payload.issue.milestone.due_on);
              if(milestoneDueOn < new Date()) {
                throw new Error("Milestone due date is already passed");
              }
              const milestoneBranch = `milestone/${context.payload.issue.milestone.title}`;
              const getBranchResponse = await github.rest.repos.getBranch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: milestoneBranch
                });
              console.log("getBranchResponse: ", getBranchResponse);
              core.setOutput("milestoneBranch", {
                  name: getBranchResponse.data.name, 
                  url: getBranchResponse.data._links.html
                });
              // verify milestone branch commit has merged all of the master branch
              const compareResponse = await github.rest.repos.compareCommits({
                owner: context.repo.owner,
                repo: context.repo.repo,
                base: "master",
                head: milestoneBranch
              });
              console.log("milestone branch as base and master branch as head, compareResponse: ", compareResponse);
              if (compareResponse.data.behind_by > 0) {
                throw new Error(`Milestone branch [${milestoneBranch}] is behind master by ${compareResponse.data.behind_by} commits.`);
              }
            } catch (error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during milestone validation, reason: ${error.message}`);
              core.setFailed(error.message);
            }
      - id: testplan-issue
        name: Validate Testplan issue
        uses: actions/github-script@v7
        with:
          script: |
            try {
              // verify if regression label exists ? if so find parent issue and set as output for further use
              // if parent issue is not found, then set failed reason
              const allowedTypes = ["regression"];
              const foundTypeLabel = context.payload.issue.labels.find(label=>allowedTypes.includes(label.name));
              core.setOutput("testplanType", foundTypeLabel?.name || "unknown");
              if(!foundTypeLabel) {
                throw new Error("Test plan type label not found in issue labels");
              }
              // find test plan issue with same milestone and type label
              const testplanIssueRegex = new RegExp(".+Test Plan:.+https://github.com/"+context.repo.owner+"/"+context.repo.repo+"/issues/(\\d+).+", "i");
              if(!testplanIssueRegex.test(context.payload.issue.body)) {
                throw new Error("Test plan issue link not found")
              }
              const testplanIssueNumber = testplanIssueRegex.exec(context.payload.issue.body)[1];
              const getIssueResponse = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: testplanIssueNumber
              });
              console.log("getIssueResponse: ", getIssueResponse);
              const allowedLabels = [foundTypeLabel.name, "test plan"];
              const testplanLabels = getIssueResponse.data.labels.filter(label=>allowedLabels.includes(label.name));
              if(testplanLabels.length!==allowedLabels.length ||
                 getIssueResponse.data.state!=="open" || 
                 getIssueResponse.data.milestone.number!==context.payload.issue.milestone.number ) {
                 throw new Error("matching testplan issue not found")
              }
              core.setOutput("parentIssue", getIssueResponse.data);
              core.setOutput("issueDetails", context.payload.issue);
            } catch(error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during test plan validation, reason: ${error.message}`);
              core.setFailed(error.message);
            }
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          cache: "pip" # caching pip dependencies
          python-version: "3.13"
      - id: request-form
        name: Validate Request Form Details
        env:
          TESTPLAN_TYPE: ${{ steps.testplan-issue.outputs.testplanType }}
        run: |
          echo '${{ steps.testplan-issue.outputs.parentIssue }}' > parent_issue_details.json
          echo '${{ steps.testplan-issue.outputs.issueDetails }}' > request_form_issue_details.json
          python --version
          pip install -r .github/scripts/requirements.txt
          set +e
          python .github/scripts/testplan_deploy_request.py --validate \
              --parent-issue-details "parent_issue_details.json" \
              --request-form-issue-details "request_form_issue_details.json" \
              --testplan-type "$TESTPLAN_TYPE" > deploy_request_output.log 2>&1
          RETURN_CODE=$?
          set -e
          if [ $RETURN_CODE -ne 0 ]; then
            echo "failedReason<<EOF" >> $GITHUB_OUTPUT
            cat deploy_request_output.log >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi
          cat deploy_request_output.log
          exit $RETURN_CODE
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - id: provision-stack
        if: ${{ steps.request-form.outputs.request_type == 'provision' }}
        name: Verify milestone branch is deployable
        env:
          ENVID: ${{ vars.AWS_ENVID }}
          MILESTONE_TITLE: ${{ github.event.issue.milestone.title }}
          API_VERSION: ${{ steps.request-form.outputs.api_version }}
        run: |
          UI_STACK_NAME="prsfin-$ENVID-ui-deploy-stack"  
          set +e
          DESCRIBE_UI_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$UI_STACK_NAME")
          RET_CODE=$?
          set -e
          if [[ $RET_CODE -ne 0 ]]; then
            echo "UI Stack does not exist. milestone branch can be deployed."
            exit 0
          fi

          ENV_TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='environment'].Value")
          if [[ "$ENV_TAG_VALUE" != "$ENVID" ]]; then
            FAILED_REASON="Stack is deployed for other environment $ENV_TAG_VALUE stack."
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi

          MILESTONE_TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='milestone'].Value")
          if [[ "$MILESTONE_TAG_VALUE" != "$MILESTONE_TITLE" ]]; then
            FAILED_REASON="Other milestone branch is deployed to Test plan environment. Wait for completion of $MILESTONE_TAG_VALUE tests."
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi
          UI_CREATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
          UI_UPDATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
          UI_STACK_AUDIT='{"created_time":'$UI_CREATED_TIME',"updated_time":'$UI_UPDATED_TIME'}'

          if [[ -z "$API_VERSION" ]]; then
            echo "Api version is not provided."
            API_STACK_AUDIT='{}'
          else
            echo "Found UI stack and API version is provided. Proceeding with API stack validation."
            API_STACK_NAME="prsfin-$ENVID-infra-stack"
            DESCRIBE_API_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$API_STACK_NAME")

            ENV_TAG_VALUE=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='environment'].Value")
            if [[ "$ENV_TAG_VALUE" != "$ENVID" ]]; then
              FAILED_REASON="API Stack is deployed for other environment $ENV_TAG_VALUE stack."
              echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
              echo "Failed Reason: $FAILED_REASON"
              exit 1
            fi
            
            MILESTONE_TAG_VALUE=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='milestone'].Value")
            if [[ "$MILESTONE_TAG_VALUE" != "$API_VERSION" ]]; then
              FAILED_REASON="Other milestone branch is deployed to Test plan environment. Wait for completion of $MILESTONE_TAG_VALUE tests."
              echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
              echo "Failed Reason: $FAILED_REASON"
              exit 1
            fi
            API_CREATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
            API_UPDATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
            API_STACK_AUDIT='{"created_time":'$API_CREATED_TIME',"updated_time":'$API_UPDATED_TIME'}'
          fi

          STACK_AUDIT='{"ui":'$UI_STACK_AUDIT',"api":'$API_STACK_AUDIT'}'
          echo "stack_details<<EOF" >> $GITHUB_OUTPUT
          echo "$STACK_AUDIT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - id: deprovision-stack
        if: ${{ steps.request-form.outputs.request_type == 'deprovision' }}
        name: Verify milestone branch is destroyable
        env:
          ENVID: ${{ vars.AWS_ENVID }}
          MILESTONE_TITLE: ${{ github.event.issue.milestone.title }}
          API_VERSION: ${{ steps.request-form.outputs.api_version }}
        run: |
          UI_STACK_NAME="prsfin-$ENVID-ui-deploy-stack"  
          set +e
          DESCRIBE_UI_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$UI_STACK_NAME")
          RET_CODE=$?
          set -e
          if [[ $RET_CODE -ne 0 ]]; then
            FAILED_REASON="UI Stack does not exist. milestone branch has already been destroyed."
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi

          ENV_TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='environment'].Value")
          if [[ "$ENV_TAG_VALUE" != "$ENVID" ]]; then
            FAILED_REASON="Stack is deployed for other environment $ENV_TAG_VALUE stack."
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi

          MILESTONE_TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='milestone'].Value")
          if [[ "$MILESTONE_TAG_VALUE" != "$MILESTONE_TITLE" ]]; then
            FAILED_REASON="Other milestone branch is deployed to Test plan environment. Wait for completion of $MILESTONE_TAG_VALUE tests."
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi
          UI_CREATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
          UI_UPDATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
          UI_STACK_AUDIT='{"created_time":'$UI_CREATED_TIME',"updated_time":'$UI_UPDATED_TIME'}'

          if [[ -z "$API_VERSION" ]]; then
            echo "Api version is not provided."
            API_STACK_AUDIT='{}'
          else
            echo "Found UI stack and API version is provided. Proceeding with API stack validation."
            API_STACK_NAME="prsfin-$ENVID-infra-stack"
            DESCRIBE_API_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$API_STACK_NAME")

            ENV_TAG_VALUE=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='environment'].Value")
            if [[ "$ENV_TAG_VALUE" != "$ENVID" ]]; then
              FAILED_REASON="API Stack is deployed for other environment $ENV_TAG_VALUE stack."
              echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
              echo "Failed Reason: $FAILED_REASON"
              exit 1
            fi
            
            MILESTONE_TAG_VALUE=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='milestone'].Value")
            if [[ "$MILESTONE_TAG_VALUE" != "$API_VERSION" ]]; then
              FAILED_REASON="Other milestone branch is deployed to Test plan environment. Wait for completion of $MILESTONE_TAG_VALUE tests."
              echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
              echo "Failed Reason: $FAILED_REASON"
              exit 1
            fi
            API_CREATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
            API_UPDATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
            API_STACK_AUDIT='{"created_time":'$API_CREATED_TIME',"updated_time":'$API_UPDATED_TIME'}'
          fi
          STACK_AUDIT='{"ui":'$UI_STACK_AUDIT',"api":'$API_STACK_AUDIT'}'
          echo "stack_details<<EOF" >> $GITHUB_OUTPUT
          echo "$STACK_AUDIT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  validate_request_api:
    name: Validate Request form phase2 (API)
    runs-on: ubuntu-latest
    needs:
      - validate_request
    environment: static-site
    outputs:
      api-milestone: ${{ steps.api-milestone.outputs.milestone }}
      failed-reason: ${{ steps.api-milestone.outputs.failedReason }}
    steps:
      - id: api-milestone
        name: Validate API Milestone
        if: contains(needs.validate_request.outputs.deployment-scope, 'api')
        uses: actions/github-script@v7
        env:
          BACKEND_REPO_NAME: ${{ vars.UI_DEPLOY_REPO_NAME }}
          API_VERSION: ${{ needs.validate_request.outputs.api-version }}
        with:
          github-token: ${{ secrets.ON_DEMAND_DEPLOY_UI_PAT }}
          script: |
            try {
              const listMilestonesResponse = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: process.env.BACKEND_REPO_NAME,
                state: "all"
              });
              console.log("listMilestonesResponse: ", listMilestonesResponse);
              const apiMilestone = listMilestonesResponse.data.find(mlstn=>mlstn.title===process.env.API_VERSION);
              if(!apiMilestone) {
                throw new Error(`Milestone issue is not found. provided version[${process.env.API_VERSION}] incorrect.`);
              }
              core.setOutput("milestone", apiMilestone);
            } catch (error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during milestone validation, reason: ${error.message}`);
              core.setFailed(error.message);
            }

  build_artifact:
    name: create artifact
    runs-on: ubuntu-latest
    needs:
      - validate_request
    environment: static-site
    if: needs.validate_request.outputs.request-type == 'provision'
    outputs:
      artifact-id: ${{ steps.upload-artifact-step.outputs.artifact-id }}
      artifact-url: ${{ steps.upload-artifact-step.outputs.artifact-url }}
      artifact-digest: ${{ steps.upload-artifact-step.outputs.artifact-digest }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.validate_request.outputs.milestone-branch.name }}
      - name: Setup Node Latest
        # https://github.com/actions/setup-node
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
          cache: "npm"
      - name: Build Code
        run: |
          npm --version
          npm ci
          cp src/demo/dummy.ts src/demo/index.ts
          npm run build
        env:
          REACT_APP_BASE_PATH: ${{ vars.REACT_APP_BASE_PATH }}
          REACT_APP_REST_API_BASE_PATH: ${{ vars.REACT_APP_REST_API_BASE_PATH }}
          REACT_APP_MINIMUM_SESSION_TIME: ${{ vars.REACT_APP_MINIMUM_SESSION_TIME }}
          GENERATE_SOURCEMAP: "true"
          PUBLIC_URL: ${{ vars.PUBLIC_URL }}
      - name: upload artifact
        id: upload-artifact-step
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ./build/
          if-no-files-found: error
          retention-days: 2
          overwrite: true
      - name: artifact Outputs
        run: |
          echo Artifact ID is ${{ steps.upload-artifact-step.outputs.artifact-id }}
          echo Artifact URL is ${{ steps.upload-artifact-step.outputs.artifact-url }}
          echo Artifact DIGEST is ${{ steps.upload-artifact-step.outputs.artifact-digest }}

  deployment:
    name: deploy static UI
    runs-on: ubuntu-latest
    needs:
      - build_artifact
      - validate_request
      - validate_request_api
      - update_request
    environment: static-site
    permissions:
      contents: write
      id-token: write
    outputs:
      deployment-start-time: ${{ steps.dispatch-payload.outputs.deploymentStartTime }}
      failed-reason: ${{ steps.create-api-issue.outputs.failedReason || steps.dispatch-payload.outputs.failedReason || steps.update_issue_deploying.outputs.failedReason }}
    steps:
      - id: create-api-issue
        name: Provision API Environment
        uses: actions/github-script@v7
        if: ${{ contains(needs.validate_request.outputs.deployment-scope, 'api') }}
        env:
          BACKEND_REPO_NAME: ${{ vars.UI_DEPLOY_REPO_NAME }}
          TESTPLAN_TYPE: ${{ needs.validate_request.outputs.testplan-type }}
          ORIGINAL_ISSUE_TITLE: ${{ needs.update_request.outputs.original-issue-title }}
        with:
          github-token: ${{ secrets.ON_DEMAND_DEPLOY_UI_PAT }}
          script: |
            try {
              let issueBody = context.payload.issue.body;
              issueBody += "\n\n";
              issueBody += "Created because of UI Provision Issue [Issue-" + context.payload.issue.number + "]("+ context.payload.issue.html_url + ")";
              issueBody += "\n\n";
              const createIssueResponse = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: process.env.BACKEND_REPO_NAME,
                title: process.env.ORIGINAL_ISSUE_TITLE,
                body: issueBody,
                labels: ["deployment", "test plan", process.env.TESTPLAN_TYPE],
                milestone: ${{ needs.validate_request_api.outputs.api-milestone.number }}
              });
              console.log("api createIssueResponse: ", createIssueResponse);
              core.setOutput("details", createIssueResponse.data);
              // add parent testplan issue as parent relationship to api issue
              // when github rest and octokit will add support cross repo issue relationship
            } catch(error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during API issue creation, reason: ${error.message}`);
              core.setFailed(error.message);
            }
      - id: dispatch-payload
        name: Prepare Dispatch Payload
        uses: actions/github-script@v7
        env:
          EVENT_TYPE: ${{ vars.UI_DEPLOY_EVENT_TYPE }}
          TESTPLAN_TYPE: ${{ needs.validate_request.outputs.testplan-type }}
          TESTPLAN_ISSUE_NUMBER: ${{ needs.validate_request.outputs.parent-issue.number }}
          API_VERSION: ${{ needs.validate_request.outputs.api-version }}
          STACK_REPO_NAME: ${{ vars.UI_DEPLOY_REPO_NAME }}
        with:
          github-token: ${{ secrets.ON_DEMAND_DEPLOY_UI_PAT }}
          script: |
            try {
              const clientPayload = {
                env_type: "testplan",
                artifact_name: process.env.ARTIFACT_NAME,
                ui_repository: context.repo.repo,
                workflow_run_id: context.runId,
                type: "provision",
                stackTags: []
              };
              clientPayload.stackTags.push(`workflow_run_id=${context.runId}`);
              clientPayload.stackTags.push(`milestone=${context.payload.issue.milestone.title}`);
              clientPayload.stackTags.push(`testplanType=${process.env.TESTPLAN_TYPE}`);
              clientPayload.stackTags.push(`testplanIssue=${context.repo.repo}/issue-${process.env.TESTPLAN_ISSUE_NUMBER}`);
              clientPayload.stackTags.push(`requestIssueNumber=${context.payload.issue.number}`);
              const apiVersion = process.env.API_VERSION
              if(apiVersion) {
                clientPayload.stackTags.push(`apiVersion=${apiVersion}`);
              }
              const createDispatchEventResponse = await github.rest.repos.createDispatchEvent({
                owner:context.repo.owner,
                repo: process.env.STACK_REPO_NAME,
                event_type: process.env.EVENT_TYPE,
                client_payload: clientPayload
              });
              console.log("createDispatchEventResponse: ", createDispatchEventResponse);
              core.setOutput("deploymentStartTime", new Date().toISOString());
            } catch(error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during dispatch payload creation, reason: ${error.message}`);
              core.setFailed(error.message);
            }
      - id: update_issue_deploying
        name: Update Issue - Deploying
        uses: actions/github-script@v7
        env:
          ARTIFACT_URL: ${{ needs.build_artifact.outputs.artifact-url }}
          ARTIFACT_ID: ${{ needs.build_artifact.outputs.artifact-id }}
          MILESTONE_BRANCH_NAME: ${{ needs.validate_request.outputs.milestone-branch.name }}
          TESTPLAN_TYPE: ${{ needs.validate_request.outputs.testplan-type }}
          DEPLOY_START_TIME: ${{ steps.dispatch-payload.outputs.deploymentStartTime }}
          ORIGINAL_ISSUE_TITLE: ${{ needs.update_request.outputs.original-issue-title }}
        with:
          script: |
            try {
              const artifactTitleWithLink = `[${process.env.ARTIFACT_NAME} (${process.env.ARTIFACT_ID})](${process.env.ARTIFACT_URL})`;
              const commentBody = [
                "## UI Deployment Started",
                "<br/>", 
                "", "### Start Time: ", "",
                "  " + process.env.DEPLOY_START_TIME, 
                "", "### Milestone Branch: ", "",
                "  " + process.env.MILESTONE_BRANCH_NAME, 
                "", "### UI Artifact: ", "",
                "  The artifact is created and passed to deployment. You can verify artifact by downloading, " + artifactTitleWithLink
              ];
              
              commentBody.push("", "### UI Stack: ", "");
              const stackDetails = ${{ needs.validate_request.outputs.stack-details }}
              if(stackDetails?.ui) {
                // audit details available
                commentBody.push("- **Created On:**  " + stackDetails.ui.created_time);
                commentBody.push("- **Updated On:**  " + stackDetails.ui.updated_time);
              } else {
                commentBody.push("UI Stack is not found. It seems to be first deployment.");
              }
              commentBody.push("", "### API Stack: ", "");
              const apiIssueDetails = ${{ steps.create-api-issue.outputs.details }};
              if(apiIssueDetails) {
                const apiIssueWithLink = "[API Issue-" + apiIssueDetails.number + "](" + apiIssueDetails.html_url + ")";
                commentBody.push("The issue, " + apiIssueWithLink + ", for API deployment is created.");
              }
              if(stackDetails?.api) {
                // audit details available
                commentBody.push("- **Created On:**  " + stackDetails.api.created_time);
                commentBody.push("- **Updated On:**  " + stackDetails.api.updated_time);
              } else {
                commentBody.push("API Stack is not found. It seems to be first deployment.");
              }

              commentBody.push("<br/>", "");
              commentBody.push("> [!NOTE]", "> Please wait for the deployment to complete. This issue will be updated with deployment status.");
              commentBody.push("<br/>", "<br/>",  "");
              
              const workflowTitle = context.workflow +" (" + context.runId + ")";
              const workflowLink = context.payload.repository.html_url+"/actions/runs/"+context.runId;
              commentBody.push("### Request Processed By: ", `  [Workflow - ${workflowTitle}](${workflowLink})`, "");

              console.log("commentRequest: ", {issue_number: context.payload.issue.number, body: commentBody});
              const unlockIssueResponse = await github.rest.issues.unlock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              console.log("issue is unlock temporarily, unlock issue response:", unlockIssueResponse);
              const commentResponse = github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: commentBody.join("\n")
              });
              console.log("commentResponse: ", commentResponse);
              const updateIssueResponse = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                title: "[Approved] " + process.env.ORIGINAL_ISSUE_TITLE
              });
              console.log("updateIssueResponse: ", updateIssueResponse);
              const lockIssueResponse = await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              console.log("issue is lock again, lock issue response:", lockIssueResponse);
            } catch(error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during issue update, reason: ${error.message}`);
              core.setFailed(error.message);
            }

  deployment_complete:
    name: Handle Deployment Completion
    runs-on: ubuntu-latest
    needs:
      - validate_request
      - deployment
    environment: testplan
    permissions:
      id-token: write
    outputs:
      failed-reason: ${{ steps.wait-for-ui-deployment.outputs.failedReason || steps.update_issue_deployment_complete.outputs.failedReason }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: cdkSession
      - id: wait-for-ui-deployment
        name: Wait for UI Deployment to Complete
        env:
          ENVID: ${{ vars.AWS_ENVID }}
          MILESTONE_TITLE: ${{ github.event.issue.milestone.title }}
          WORKFLOW_RUN_ID: ${{ github.workflow.run_id }}
        run: |
          # Wait duration to execute the command and check status 
          SLEEP_DURATION=3m
          TOTAL_WAIT_DURATION=60m
          UI_STACK_NAME="prsfin-$ENVID-ui-deploy-stack"
          FAILED_REASON=""
          REMAINING_ATTEMPTS=$((TOTAL_WAIT_DURATION / SLEEP_DURATION))
          while :; do
            echo "Deployment is in progress. Waiting for $SLEEP_DURATION."
            sleep $SLEEP_DURATION
            set +e
            DESCRIBE_UI_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$UI_STACK_NAME")
            RET_CODE=$?
            set -e
            if [[ $RET_CODE -eq 0 ]]; then
              TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='milestone'].Value")
              if [[ "$TAG_VALUE" != "$MILESTONE_TITLE" ]]; then
                continue
              fi
              TAG_VALUE=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].Tags[?Key=='workflow_run_id'].Value")
              if [[ "$TAG_VALUE" != "$WORKFLOW_RUN_ID" ]]; then
                continue
              fi

              STACK_STATUS=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].StackStatus")
              # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/view-stack-events.html#cfn-console-view-stack-data-resources-status-codes
              if [[ "$STACK_STATUS" =~ ^(CREATE_COMPLETE|UPDATE_COMPLETE)$ ]]; then
                echo "UI Stack is deployed successfully."
                break
              elif [[ "$STACK_STATUS" =~ ^(CREATE_FAILED|UPDATE_FAILED|ROLLBACK.*|UPDATE_ROLLBACK.*|DELETE.*)$ ]]; then
                FAILED_REASON="UI Stack deployment failed. Stack status is $STACK_STATUS. Please check stack events."
                break
              fi
            fi
            if [[ $REMAINING_ATTEMPTS -eq 0 ]]; then
              FAILED_REASON="UI Stack deployment is taking longer time. Please check the status manually."
              break
            fi
            REMAINING_ATTEMPTS=$((REMAINING_ATTEMPTS - 1))
          done
          UI_CREATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
          UI_UPDATED_TIME=$(echo "$DESCRIBE_UI_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
          UI_STACK_AUDIT='{"created_time":'$UI_CREATED_TIME',"updated_time":'$UI_UPDATED_TIME'}'

          API_STACK_NAME="prsfin-$ENVID-infra-stack"
          DESCRIBE_API_STACK_OUT=$(aws cloudformation describe-stacks --stack-name "$API_STACK_NAME")
          API_CREATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].CreationTime")
          API_UPDATED_TIME=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].LastUpdatedTime")
          API_STACK_AUDIT='{"created_time":'$API_CREATED_TIME',"updated_time":'$API_UPDATED_TIME'}'
          STACK_OUTPUTS=$(echo "$DESCRIBE_API_STACK_OUT" | jq -r ".Stacks[0].Outputs")

          STACK_AUDIT='{"ui":'$UI_STACK_AUDIT',"api":'$API_STACK_AUDIT',"outputs":'$STACK_OUTPUTS'}'
          echo "stack_details<<EOF" >> $GITHUB_OUTPUT
          echo "$STACK_AUDIT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if [[ -n "$FAILED_REASON" ]]; then
            echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
            echo "Failed Reason: $FAILED_REASON"
            exit 1
          fi
      - id: update_issue_deployment_complete
        name: Update Issue - Deployment Complete
        uses: actions/github-script@v7
        env:
          MILESTONE_BRANCH_NAME: ${{ needs.validate_request.outputs.milestone-branch.name }}
          TESTPLAN_TYPE: ${{ needs.validate_request.outputs.testplan-type }}
          DEPLOYMENT_START_TIME: ${{ needs.deployment.outputs.deployment-start-time }}
        with:
          script: |
            try {
              const artifactTitleWithLink = `[${process.env.ARTIFACT_NAME} (${process.env.ARTIFACT_ID})](${process.env.ARTIFACT_URL})`;
              const deploymentEndTime = new Date();
              const diffParts = new Date(new Date() - new Date(process.env.DEPLOYMENT_START_TIME)).toISOString().substr(11, 8).split(":");
              let duration = "";
              if(parseInt(diffParts[0]) > 0) {
                duration += diffParts[0] + " hour" + (diffParts[0] > 1 ? "s " : " ");
              }
              if(parseInt(diffParts[1]) > 0) {
                duration += diffParts[1] + " minute" + (diffParts[1] > 1 ? "s " : " ");
              }
              if(parseInt(diffParts[2]) > 0) {
                duration += diffParts[2] + " second" + (diffParts[2] > 1 ? "s " : " ");
              }
              const commentBody = [
                "## UI Deployment Completed",
                "<br/>", 
                "", "### Deployment Time: ", "",
                "| | time |", 
                "|---|---|",
                `| **Start Time** | ${process.env.DEPLOYMENT_START_TIME} |`,
                `| **End Time** | ${deploymentEndTime.toISOString()} |`,
                `| **Duration** | ${duration} |`,
                "<br/>"
              ];
              const stackDetails = ${{ steps.wait-for-ui-deployment.outputs.stack_details }}
              const domainUrlOutput = stackDetails.outputs.find(output => output.OutputKey.startsWith("DistributionDomain"))?.OutputValue;
              if(domainUrlOutput) {
                commentBody.push("", "### Domain UI URL: ", "");
                commentBody.push("  " + domainUrlOutput);
              }
              commentBody.push("", "### UI Stack: ", "");
              if(stackDetails?.ui) {
                // audit details available
                commentBody.push("- **Created On:**  " + stackDetails.ui.created_time);
                commentBody.push("- **Updated On:**  " + stackDetails.ui.updated_time);
              }
              commentBody.push("", "### API Stack: ", "");
              if(stackDetails?.api) {
                // audit details available
                commentBody.push("- **Created On:**  " + stackDetails.api.created_time);
                commentBody.push("- **Updated On:**  " + stackDetails.api.updated_time);
              }

              commentBody.push("<br/>", "");
              commentBody.push("> [!NOTE]", "> The Deployment is completed. This request issue will be closing.");
              commentBody.push("<br/>", "<br/>",  "");
              
              const workflowTitle = context.workflow +" (" + context.runId + ")";
              const workflowLink = context.payload.repository.html_url+"/actions/runs/"+context.runId;
              commentBody.push("### Request Processed By: ", `  [Workflow - ${workflowTitle}](${workflowLink})`, "");

              const unlockIssueResponse = await github.rest.issues.unlock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              console.log("issue is unlock temporarily, unlock issue response:", unlockIssueResponse);
              console.log("commentRequest: ", {issue_number: context.payload.issue.number, body: commentBody});
              const commentResponse = github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                body: commentBody.join("\n")
              });
              console.log("for request form, commentResponse: ", commentResponse);
              const updateIssueResponse = await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number,
                state: 'closed'
              });
              console.log("updateIssueResponse: ", updateIssueResponse);
              const lockIssueResponse = await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.issue.number
              });
              console.log("issue is lock again, lock issue response:", lockIssueResponse);
              const testplanIssueNumber = ${{ needs.validate_request.outputs.parent-issue.number }};
              const unlockIssueResponse2 = await github.rest.issues.unlock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: testplanIssueNumber
              });
              console.log("testplan issue is unlock temporarily, unlock issue response:", unlockIssueResponse2);
              const parentCommentResponse = github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: testplanIssueNumber,
                body: commentBody.join("\n")
              });
              console.log("for testplan, commentResponse: ", parentCommentResponse);
              const lockIssueResponse2 = await github.rest.issues.lock({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: testplanIssueNumber
              });
              console.log("issue is lock again, lock issue response:", lockIssueResponse2);
            } catch(error) {
              console.error("failed reason: ", error);
              core.setOutput("failedReason", `Error during issue update for deployment completion, reason: ${error.message}`);
              core.setFailed(error.message);
            }

  destroy:
    name: Destroy UI Stack
    runs-on: ubuntu-latest
    needs:
      - validate_request
    if: needs.validate_request.outputs.request-type == 'deprovision'
    outputs:
      failed-reason: ${{ steps.validate-destroy.outputs.failedReason }}
    steps:
      - id: validate-destroy
        run: |
          FAILED_REASON="The Request of Destroy UI Stack is not supported yet."
          echo "failedReason=$FAILED_REASON" >> $GITHUB_OUTPUT
          echo "Failed Reason: $FAILED_REASON"
          exit 1

  handle_failure:
    name: Handle Request form Failure
    runs-on: ubuntu-latest
    needs:
      - update_request
      - validate_request
      - validate_request_api
      - build_artifact
      - deployment
      - deployment_complete
      - destroy
    if: failure()
    steps:
      - run: |
          echo 'Update Request: ${{ toJson(needs.update_request) }}'
          echo 'Validate Request: ${{ toJson(needs.validate_request) }}'
          echo 'Validate Request Api: ${{ toJson(needs.validate_request_api) }}'
          echo 'Build Artifact: ${{ toJson(needs.build_artifact) }}'
          echo 'Deployment: ${{ toJson(needs.deployment) }}'
          echo 'Deployment Complete: ${{ toJson(needs.deployment_complete) }}'
          echo 'Destroy: ${{ toJson(needs.destroy) }}'
        continue-on-error: true
      - id: prepare-error
        uses: actions/github-script@v7
        env:
          VALIDATION_FAIL_REASON: ${{ needs.update_request.outputs.failed-reason || needs.validate_request.outputs.failed-reason || needs.validate_request_api.outputs.failed-reason }}
          IS_VALIDATION_FAILED: ${{ needs.update_request.result == 'failure' || needs.validate_request.result == 'failure' || needs.validate_request_api.result == 'failure' }}
          REQUEST_TYPE: ${{ needs.validate_request.outputs.request-type }}
          DEPLOY_FAILED_REASON: ${{ needs.deployment.outputs.failed-reason || needs.deployment_complete.outputs.failed-reason }}
          IS_DEPLOY_FAILED: ${{ needs.deployment.result == 'failure' || needs.deployment_complete.result == 'failure' }}
          DESTROY_FAILED_REASON: ${{ needs.destroy.outputs.failed-reason }}
          IS_DESTROY_FAILED: ${{ needs.destroy.result == 'failure' }}
        with:
          script: |
            let errorDetails= "Found unknown error. Please check the logs.";
            if(String(process.env.IS_VALIDATION_FAILED) === "true") {
              errorDetails = process.env.VALIDATION_FAIL_REASON || errorDetails;
              core.setOutput("reason", "Validation of Request form is failed.");
              core.setOutput("status", "Denied");
            } else if(String(process.env.IS_DEPLOY_FAILED) === "true") {
              errorDetails = process.env.DEPLOY_FAILED_REASON || errorDetails;
              core.setOutput("reason", "Deployment of UI app is failed.");
              core.setOutput("status", "Failed");
            } else if(String(process.env.IS_DESTROY_FAILED) === "true") {
              errorDetails = process.env.DESTROY_FAILED_REASON || errorDetails;
              core.setOutput("reason", "Destroy of UI app is failed.");
              core.setOutput("status", "Failed");
            } else {
              throw new Error("could not find any fail job");
            }
            core.setOutput("details", errorDetails);
      - name: Unlock Issue temporarily
        uses: actions/github-script@v7
        with:
          script: |
            const unlockIssueResponse = await github.rest.issues.unlock({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });
            console.log("issue is unlock temporarily, unlock issue response:", unlockIssueResponse);
      - name: Add Failed Reason as Comment
        uses: actions/github-script@v7
        env:
          FAIL_REASON: ${{ steps.prepare-error.outputs.reason }}
          ERROR_DETAILS: ${{ steps.prepare-error.outputs.details }}
          FAIL_STATUS: ${{ steps.prepare-error.outputs.status }}
        with:
          script: |
            const commentBody = [
                    "## Request " + process.env.FAIL_STATUS, 
                    "<br/>", "",
                    "### Reason:",
                    "  " + process.env.FAIL_REASON,
                    "", "",
                    "**Error:**  " + process.env.ERROR_DETAILS, 
                    "<br/>",  "",
                    "> [!NOTE]",
                    "> **Needs Action:**   Please raise a `new request form` with correct details. This request issue will be `closed`.",
                    "<br/>", "<br/>",  "",
                    ];
            const workflowTitle = context.workflow +" (" + context.runId + ")";
            const workflowLink = context.payload.repository.html_url+"/actions/runs/"+context.runId;
            commentBody.push("### Request Processed By: ", `  [Workflow - ${workflowTitle}](${workflowLink})`, "");

            console.log("commentRequest: ", {issue_number: context.payload.issue.number, body: commentBody});
            const commentResponse = github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: commentBody.join("\n")
            });
            console.log("commentResponse: ", commentResponse);
      - name: Close Issue
        uses: actions/github-script@v7
        env:
          FAIL_STATUS: ${{ steps.prepare-error.outputs.status }}
          ORIGINAL_ISSUE_TITLE: ${{ needs.update_request.outputs.original-issue-title || github.event.issue.title }}
        with:
          script: |
            const closeUpdateResponse = await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              state: 'closed',
              title: "[" + process.env.FAIL_STATUS + "]" + process.env.ORIGINAL_ISSUE_TITLE,
            });
            console.log("closeUpdateResponse: ", closeUpdateResponse);
      - name: Lock Issue
        uses: actions/github-script@v7
        with:
          script: |
            const lockIssueResponse = await github.rest.issues.lock({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number
            });
            console.log("issue lock again, lock issue response:", lockIssueResponse);
